// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 모델 (Google OAuth)
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // OAuth 계정 정보
  accounts Account[]
  sessions Session[]

  // 사용자가 관리하는 캠페인/브랜드
  campaigns Campaign[]

  @@map("users")
}

// OAuth 계정 정보
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// 세션 정보
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// 브랜드/캠페인 모델
model Campaign {
  id          String   @id @default(cuid())
  name        String
  description String?
  sheetId     String?
  sheetName   String?
  sheetUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 캠페인 소유자
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 캠페인 관련 데이터
  applicants       Applicant[]
  selectionResults SelectionResult[]
  mailHistories    MailHistory[]

  @@map("campaigns")
}

// 신청자 모델
model Applicant {
  id              String          @id @default(cuid())
  name            String
  email           String
  phone           String?
  applicationDate DateTime        @default(now())
  status          ApplicantStatus @default(PENDING)
  notes           String?
  sheetRowIndex   Int
  lastUpdated     DateTime        @updatedAt
  createdAt       DateTime        @default(now())

  // 캠페인 연결
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  // SNS 프로필
  snsProfiles SNSProfile[]

  // 선정 결과
  selectionResults SelectionResult[]

  // 메일 발송 이력
  mailHistories MailHistory[]

  @@unique([campaignId, email])
  @@map("applicants")
}

// SNS 프로필 모델
model SNSProfile {
  id        String      @id @default(cuid())
  platform  SNSPlatform
  url       String
  handle    String?
  followers Int?
  visitors  Int?
  isValid   Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // 신청자 연결
  applicantId String
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  @@map("sns_profiles")
}

// 선정 결과 모델
model SelectionResult {
  id                  String           @id @default(cuid())
  isSelected          Boolean
  selectionReason     String
  selectionDate       DateTime         @default(now())
  qualifyingPlatforms Json // string[] 저장
  processingStatus    ProcessingStatus @default(COMPLETED)
  sheetUpdated        Boolean          @default(false)
  sheetUpdateDate     DateTime?
  emailSent           Boolean          @default(false)
  emailSentDate       DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  // 신청자 연결
  applicantId String
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  // 캠페인 연결
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  // 기준 충족 여부
  meetsCriteria Json // { naverBlog: boolean, instagram: boolean, threads: boolean }

  // SNS 데이터 스냅샷
  snsDataSnapshot Json // 선정 당시의 SNS 데이터

  @@unique([applicantId, campaignId])
  @@map("selection_results")
}

// 메일 발송 이력 모델
model MailHistory {
  id          String     @id @default(cuid())
  mailType    MailType
  recipient   String
  subject     String
  content     String     @db.Text
  status      MailStatus @default(PENDING)
  sentAt      DateTime?
  failReason  String?
  scheduledAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // 신청자 연결
  applicantId String
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  // 캠페인 연결
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("mail_histories")
}

// 동기화 로그 모델
model SyncLog {
  id                String   @id @default(cuid())
  success           Boolean
  newApplicants     Int      @default(0)
  updatedApplicants Int      @default(0)
  errors            Json // string[] 저장
  lastSyncTime      DateTime @default(now())
  createdAt         DateTime @default(now())

  @@map("sync_logs")
}

// Enum 정의
enum ApplicantStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SNSPlatform {
  INSTAGRAM
  NAVER_BLOG
  THREADS
}

enum ProcessingStatus {
  PENDING
  COMPLETED
  FAILED
}

enum MailType {
  SELECTION_NOTIFICATION
  REJECTION_NOTIFICATION
  FOLLOW_UP
  REMINDER
}

enum MailStatus {
  PENDING
  SENT
  FAILED
  SCHEDULED
}
